// 1.请说出下列最终的执行结果 ，并解释为什么？
var a = []
for (var i = 0; i < 10; i++) {
  a[i] = function () {
    console.log(i)
  }
}
a[6]()
// 输出10，因为在循环执行完后 i 的值已经累加到了 10

//----------------------------------------------------------------------------------

// 2.请说出下列最终的执行结果，并解释为甚么？
var tmp = 123
if (true) {
  console.log(tmp)
  // let tmp
}
// 会报错，暂时性死区，只要块级作用域内存 let 命令，它所声明的变量就绑定了这个区域，不会在受外部的影响，所以 if 语句中，在 let 声明 tmp 之前 console.log(tmp) 会报错

//----------------------------------------------------------------------------------

// 3.结合ES6新语法，用最简单的方式找出数组中的最小值
var arr = [12, 34, 32, 89, 4]
console.log(Math.min(...arr))

//----------------------------------------------------------------------------------

// 4.请详细说明 var ，let ，const 三种声明变量的方式之间的具体差别
/**
 * 
 * var 定义的变量 1.变量提升 2.可以对同一个变量重复声明赋值 3.定义的变量是全局变量或者函数变量（没有块级作用域）
 * let 定义的变量 1.只能在所声明的代码块中被访问 2.不允许在相同作用域内重复声明 3.不存在变量提升，必须遵循 先声明，在使用 的方式，否则就会报错
 * const 定义的变量 1.拥有 let 的所有特性 2.声明的变量是一个常量 3.只读，在声明过后不允许在被修改（是指不允许在定义赋值后，重新去指向一个新的内存地址，并不是不允许修改常量中的属性成员）
 * 
 */

//----------------------------------------------------------------------------------

// 5.请说出下列代码最终输出的结果，并解释为什么？
var a = 10
var obj = {
  a: 20,
  fn () {
    setTimeout(() => {
      console.log(this.a)
    })
  }
}
obj.fn()
// 输出 20 , 普通函数中的 this 指向取决于函数的调用情况，这里是通过 obj.fn() 所以在 fn 函数中的 this 就指向 obj， 而 setTimeout() 中是一个箭头函数，箭头函数不会改变 this 指向，所以这里输出 obj.a 的值

//----------------------------------------------------------------------------------

// 6.简述 Symbol 类型的用途？
// 为对象添加独一无二的属性名

//----------------------------------------------------------------------------------

// 7.说说什么是浅拷贝，什么是深拷贝
// 浅拷贝：只是简单的指针赋值   深拷贝：指针赋值，且内容拷贝

//----------------------------------------------------------------------------------

// 8.谈谈你是如何理解 js 异步编程的，EventLoop 是做什么的，什么是宏任务，什么是微任务？
// js 异步编程：为了解决耗时任务阻塞执行
// EventLoop：读取任务队列中的结果，进入主线程执行
// 宏任务：回调队列中的任务称之为宏任务
// 微任务：直接在当前任务结束后立即执行的任务

//----------------------------------------------------------------------------------

// 9.将下面异步代码使用 Promise 改进？
setTimeout(function () {
  var a = 'hello'
  setTimeout(function () {
    var b = 'lagou'
    setTimeout(function () {
      var c = 'I ❤ U'
      console.log(a + b + c)
    }, 10)
  }, 10)
}, 10)
Promise.resolve()
.then(function () {
  return new Promise(function (resolve) {
    setTimeout(function () {
      var a = 'hello'
      resolve(a)
    }, 10)
  })
})
.then(function (res) {
  return new Promise(function (resolve) {
    setTimeout(function () {
      var b = 'lagou'
      resolve(res + b)
    }, 10)
  })
})
.then(function (res) {
  setTimeout(function () {
    var c = 'I ❤ U'
    console.log(res + c)
  }, 10)
})

//----------------------------------------------------------------------------------

// 10.请简述 TypeScript 与 JavaScript 之间的关系？
// TypeScript 是 JavaScript 的超集

//----------------------------------------------------------------------------------

// 11.请谈谈你所认为的 TypeScript 优缺点
// TypeScript 增加了代码的可读性和可维护性，但是有一点的学习成本